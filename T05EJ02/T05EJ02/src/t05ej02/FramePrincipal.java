/*
 * class FramePrincipal                version 1.0
 * Fecha de creación: 02/03/2021       Fecha de Última modificación: 03/03/2021
 * Autor:                              David Jiménez Riscardo 
 * Copyright (c) Desarrollo de Aplicaciones Multiplataforma, 2021
 * Módulo: DISEÑO DE INTERFACES        Unidad de Trabajo V
 */
package t05ej02;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;

/**
 * Clase que inicializa los componentes la interface de la aplicación
 * @author David Jiménez Riscardo
 */
public class FramePrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
        //Mostramos la tabla "address" dentro de un jTable
        mostrarTabla();      
    }
    
    /**
     * Método para obtener la conexión a la BD
     * @return conn Objeto con la conexión a la BD
     */
    private Connection conexionBD(){
        
        try {
            // Obtener la conexión
            Connection conn=DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/xdb","sa","");
            
            if(conn != null){
                
                //System.out.println("Conexión establecida");                  
                return conn;              
            }        
            
        } catch (SQLException e) {
             System.out.println("SQL Exception: "+ e.toString());      
        } 
         return null;              
    }//Fin de conexionBD
    
    
    /**
     * Método para mostrar el contenido de la tabla "address" dentro de un JTable
     */
    private void mostrarTabla(){
        
        try {
            
            Connection conn = conexionBD();
           
            if(conn != null){
                
                // La clase Statement contiene los métodos executeQuery y
                //executeUpdate para realizar consultas y actualizaciones
                Statement stmt = conn.createStatement();

                //El método executeQuery devuelve un objeto ResultSet para poder
                // recorrer el resultado de la consulta utilizando un cursor.
                ResultSet rs = stmt.executeQuery("SELECT * from address");
                
                stmt.close();
                conn.close();
                
                //Instanciamos un objeto de tipo DefaultTableModel y lo seteamos en el jTable     
                DefaultTableModel dtm = new DefaultTableModel();
                jTable.setModel(dtm);
                
                //Creamos array de Strings el cual inicializamos con el título de las columnas
                String arrayColumnas[] = {"Id","Nombre", "Apellidos"};     
                dtm.setColumnIdentifiers(arrayColumnas);
                
                while (rs.next()) {

                    //Por cada línea creamos un array de objetos, dicho array lo agregaremos al objeto de tipo DefaultTableModel             
                    Object arrayLinea[] = {rs.getInt("id"), rs.getString("firstname"), rs.getString("lastname")};

                    dtm.addRow(arrayLinea);
                }
                
                //Creamos un objeto para darle estilo a la tabla, sólo hemos centrado el contenido del Id
                DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
                dtcr.setHorizontalAlignment(SwingConstants.CENTER);
                jTable.getColumnModel().getColumn(0).setCellRenderer(dtcr);             
            }
                   
        }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jButtonVerFacturas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellidos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable);

        jButtonVerFacturas.setText("Ver facturas");
        jButtonVerFacturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerFacturasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jButtonVerFacturas)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jButtonVerFacturas)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método en el que gestionamos la acción de hacer clic sobre el jbutton
     * @param evt Evento hacer clic en el jbutton
     */
    private void jButtonVerFacturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerFacturasActionPerformed
        
        int fila_seleccionada = jTable.getSelectedRow();
        
        if(fila_seleccionada != -1){
          
          //Los datos se guardan en el TableModel del JTable por lo cual necesitamos tener una referencia al mismo
          DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();
          //Obtenemos los datos del jtable y los guardamos en variables. Necesitaremos el id_cliente, los otros dos datos no son necesarios
          int id_cliente = (int) dtm.getValueAt(jTable.getSelectedRow(), 0);
          String nombre = (String) dtm.getValueAt(jTable.getSelectedRow(), 1);
          String apellidos = (String) dtm.getValueAt(jTable.getSelectedRow(), 2);
          //System.out.println(id+" "+nombre+" "+apellidos);
          
          //Debo de realizar una consulta a la BD para controlar si existen facturas. En caso contrario debemos de mostrar un mensaje
          try {
            
            Connection conn = conexionBD();
           
            if(conn != null){
                
                //utilizamos una consulta preparada, puede realizarse con una consulta normal
                String sql = "SELECT COUNT(id) from document WHERE addressid=?";
                
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, id_cliente ); 
     
                ResultSet rs = pstmt.executeQuery();
 
                while (rs.next()) {
                    
                    //Existen facturas, por lo que debemos de generar el informe
                    if( rs.getInt(1)>0 ){
                        //System.out.println(rs.getInt(1));
                        generarInforme(id_cliente);
    
                    }else {
                        JOptionPane.showMessageDialog(rootPane, "No existen facturas pendientes", "Mensaje de información", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                rs.close();         
                pstmt.close();
                conn.close(); 
            }
          }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
          }   

        }else{
            JOptionPane.showMessageDialog(rootPane, "Debe de seleccionar una fila en la tabla", "Mensaje de información", JOptionPane.INFORMATION_MESSAGE);
        }        
    }//GEN-LAST:event_jButtonVerFacturasActionPerformed

    /**
     * Método para generar el Informe que contiene las facturas pendiente de pagar por nuestro cliente
     * @param id_cliente Identificador del cliente
     */
    public void generarInforme(int id_cliente){
        
        
        String plantilla="./Informes/plantillas/FacturasUsuario.jasper";
        String directorioPDFs="./Informes/pdf/";
        
        try {
            
            //cargamos parametros del informe
            Map parametros = new HashMap();
            parametros.put("ID_CLIENTE",id_cliente);
            
            Connection conn = conexionBD();
            
            if(conn != null){
            
                //Generamos el informe en memoria
                JasperPrint print = JasperFillManager.fillReport(plantilla, parametros, conn);
                
                //Exportamos el informe a PDF
                //El nombre del PDF generado será el identificador del cliente
                JasperExportManager.exportReportToPdfFile(print, directorioPDFs+id_cliente+".pdf");
                
                //Abrimos el archivo PDF generado
                File path = new File (directorioPDFs+id_cliente+".pdf");
                Desktop.getDesktop().open(path);
                
                conn.close();
            }
            
        }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
        
        }catch (JRException e){
            
            System.out.println("JR Exception: "+ e.toString());
            
        } catch (IOException e) {
            
            System.out.println("IO Exception: "+ e.toString());
        }
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonVerFacturas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}
